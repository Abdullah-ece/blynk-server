FORMAT: 1A
HOST: https://knight-qa.blynk.cc/


# Login API

## Login [POST] [/login]

+ Request (application/x-www-form-urlencoded)

       "email" : "admin@blynk.cc"
       "password" : "84inR6aLx6tZGaQyLrZSEVYCxWW8L88MG+gOn2cncgM=" //SHA256 hash of password salted with username.toLowerCase
        
+ Response 200 (application/json)

        User json with cookie "session".

+ Response 400 (application/json)

        Email or password is empty, user not exists or password is wrong.
        
+ Response 500 (application/json)

        Unexpected server error, probably wrong content-type.

## Invite [POST] [/invite]

+ Request (application/x-www-form-urlencoded)

       "token" : "da59f715fe674730bed3dc6aacad399e"
       "password" : "84inR6aLx6tZGaQyLrZSEVYCxWW8L88MG+gOn2cncgM=" //SHA256 hash of password salted with username.toLowerCase

+ Response 200 (application/json)

        User json with cookie "session".

+ Response 400 (application/json)

        Token does not exist.

+ Response 500 (application/json)

        Unexpected server error, probably wrong content-type.

## Send reset password email when not logged [POST] [/sendResetPass]

+ Request (application/x-www-form-urlencoded)

        "email" : "user@blynk.cc"

+ Response 200 (application/json)

        Email was sent.

+ Response 400 (application/json)

        User email field is wrong.

+ Response 400 (application/json)

        Error sending email.

## Reset Password [POST] [/resetPass]

+ Request (application/x-www-form-urlencoded)

       "token" : "da59f715fe674730bed3dc6aacad399e"
       "password" : "84inR6aLx6tZGaQyLrZSEVYCxWW8L88MG+gOn2cncgM=" //SHA256 hash of password salted with username.toLowerCase

+ Response 200 (application/json)

        User json with cookie "session".

+ Response 400 (application/json)

        Token does not exist.

+ Response 500 (application/json)

        Unexpected server error, probably wrong content-type.

## Logout [POST] [/logout]

+ Request (application/json)
        
+ Response 301 (application/json)

        /dashboard


# Organizations API

## Get organization assigned to user [GET] [/organization/{orgId}]

+ Request (application/json)

+ Response 200 (application/json)

        Json of user organization

+ Response 400 (application/json)

        Cannot find organization with passed id.

+ Response 403 (application/json)

        You are not allowed to access this organization.

+ Response 500 (application/json)

        Unexpected error.

## Create New Organization [PUT] [/organization]

+ Request (application/json)

        Full organization json (without id field)

+ Response 200 (application/json)

        Full organization json

+ Response 403 (application/json)

        User is not authorized to make this request.

+ Response 500 (application/json)

        Unexpected error.

## Update Organization [POST] [/organization/{orgId}]

+ Request (application/json)

        Full organization json (with id field)

+ Response 200 (application/json)

        Full organization json

+ Response 403 (application/json)

        User is not authorized to make this request.

+ Response 403 (application/json)

        You are not allowed update to access this organization.

+ Response 500 (application/json)

        Unexpected error.

## Delete Organization [DELETE] [/organization/{orgId}]

+ Request (application/json)

+ Response 200 (application/json)

+ Response 403 (application/json)

        User is not authorized to make this request or user tries to remove initial organization.

+ Response 500 (application/json)

        Unexpected error.

## Invite user [POST] [/organization/{orgId}/invite]

+ Request (application/json)

        {"email":"USER_I_WANT_INVITE@gmail.com", "name":"Vasya Pupkin", "role":"ADMIN"}

+ Response 200 (application/json)

+ Response 400 (application/json)

        Invalid email.

+ Response 400 (application/json)

        Wrong organization id.

+ Response 403 (application/json)

        User not allowed to send invite or tries to send invite to organization he has no access.

+ Response 500 (application/json)

        Error generating invitation email.


# Organization Users API

## Get organization users [GET] [/organization/{orgId}/users]

+ Request (application/json)

+ Response 200 (application/json)

        Json of users belongs to organization

+ Response 400 (application/json)

        Cannot find organization with passed id.

+ Response 403 (application/json)

        You are not allowed to access this organization.

+ Response 500 (application/json)

        Unexpected error.

## Update organization user [POST] [/organization/{orgId}/users/update]

+ Request (application/json)

        {"email":"USER_I_WANT_UPDATE@gmail.com", "name":"Vasya Pupkin", "role":"ADMIN"}

+ Response 200 (application/json)

+ Response 400 (application/json)

        Bad data for user update.

+ Response 400 (application/json)

        Cannot find organization with passed id.

+ Response 400 (application/json)

        User not exists.

+ Response 403 (application/json)

        You are not allowed to access this organization.

+ Response 500 (application/json)

        Unexpected error.

## Delete organization users [POST] [/organization/{orgId}/users/delete]

+ Request (application/json)

        ["user1@blynk.cc","user2.blynk.cc"]

+ Response 200 (application/json)

+ Response 400 (application/json)

        Cannot find organization with passed id.

+ Response 403 (application/json)

        You are not allowed to access this organization.

+ Response 500 (application/json)

        Unexpected error.


# Account API

## Get Account Info [GET] [/account]

+ Request (application/json)

+ Response 200 (application/json)

        User json


## Update Account Info [POST] [/account]

+ Request (application/json)

        Full user json

+ Response 200 (application/json)

        Full user json


# Products API

## Get List Of Products [GET] [/product]

+ Request (application/json)

+ Response 200 (application/json)

        List of products for current user organization

        [
            {
              "id" : 1,
              "name" : "My Product",
              "boardType" : "Arduino UNO",
              "connectionType" : "WI_FI",
              "description" : "Description",
              "logoUrl" : "/static/logo.png",
              "lastModifiedTs" : 1493801505645,
              "createdAt" : 1493801505645,
              "metaFields" : [ {
                "type" : "Text",
                "id" : 1,
                "name" : "My Farm",
                "role" : "ADMIN",
                "value" : "Farm of Smith"
              }, {
                "type" : "Range",
                "id" : 2,
                "name" : "Farm of Smith",
                "role" : "ADMIN",
                "from" : 60,
                "to" : 120
              }, {
                "type" : "Number",
                "id" : 3,
                "name" : "Farm of Smith",
                "role" : "ADMIN",
                "value" : 10.222
              }, {
                "type" : "Measurement",
                "id" : 4,
                "name" : "Farm of Smith",
                "role" : "ADMIN",
                "units" : "Celsius",
                "value" : "36"
              }, {
                "type" : "Cost",
                "id" : 5,
                "name" : "Farm of Smith",
                "role" : "ADMIN",
                "currency" : "USD",
                "price" : 9.99,
                "perValue" : 1.0,
                "units" : "Gallon"
              }, {
                "type" : "Contact",
                "id" : 6,
                "name" : "Farm of Smith",
                "role" : "ADMIN",
                "contact" : "Tech Support",
                "firstName" : "Dmitriy",
                "isFirstNameEnabled" : false,
                "lastName" : "Dumanskiy",
                "isLastNameEnabled" : false,
                "email" : "dmitriy@blynk.cc",
                "isEmailEnabled" : false,
                "phone" : "+38063673333",
                "isPhoneEnabled" : false,
                "streetAddress" : "My street",
                "isStreetAddressEnabled" : false,
                "country":"Ukraine",
                "isCountryEnabled":false,
                "city" : "Kyiv",
                "isCityEnabled" : false,
                "state" : "Ukraine",
                "isStateEnabled" : false,
                "zip" : "03322",
                "isZipEnabled" : false,
                "isDefaultsEnabled" : false
              }, {
                "type" : "Address",
                "id" : 7,
                "name" : "Farm of Smith",
                "role" : "ADMIN",
                "streetAddress" : "My street",
                "isStreetAddressEnabled" : false,
                "city" : "San Diego",
                "isCityEnabled" : false,
                "state" : "CA",
                "isStateEnabled" : false,
                "zip" : "03322",
                "isZipEnabled" : false,
                "country" : "US",
                "isCountryEnabled" : false,
                "isDefaultsEnabled" : false
              }, {
                "type" : "Coordinates",
                "id" : 8,
                "name" : "Farm Location",
                "role" : "ADMIN",
                "lat" : 22.222,
                "lon" : 23.333
              }, {
                "type" : "Time",
                "id" : 9,
                "name" : "Some Time",
                "role" : "ADMIN",
                "time" : 1492697668006
              } ],
              "dataStreams" : [ {
                "name" : "Temperature",
                "units" : "Celsius",
                "min" : 0.0,
                "max" : 50.0,
                "pin" : 0
              } ],
              "events" : [ {
                "type" : "ONLINE",
                "name" : "Your device is online.",
                "isNotificationsEnabled" : false,
                "emailNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "pushNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "smsNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ]
              }, {
                "type" : "OFFLINE",
                "name" : "Your device is offline.",
                "ignorePeriod" : 1000,
                "isNotificationsEnabled" : false,
                "emailNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "pushNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "smsNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ]
              }, {
                "type" : "INFORMATION",
                "name" : "Door is opened",
                "description" : "Kitchen door is opened.",
                "isNotificationsEnabled" : false,
                "emailNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "pushNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "smsNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "eventCode" : "door_opened"
              }, {
                "type" : "WARNING",
                "name" : "Temperature is high!",
                "description" : "Room temp is high",
                "isNotificationsEnabled" : false,
                "emailNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "pushNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "smsNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "eventCode" : "temp_is_high"
              }, {
                "type" : "CRITICAL",
                "name" : "Temperature is super high!",
                "description" : "Room temp is super high",
                "isNotificationsEnabled" : false,
                "emailNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "pushNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "smsNotifications" : [ {
                  "id" : 1,
                  "type" : "META_FIELD",
                  "value" : "Farm Owner"
                } ],
                "eventCode" : "temp_is_super_high"
              } ],
              "deviceCount" : 0,
              "version" : 0
            }
        ]

+ Response 400 (application/json)

        No organization with products.


## Get Product by Id [GET] [/product/{productId}]

+ Request (application/json)

        Full product json

+ Response 400 (application/json)

        Product with passed id is not found.

## Create New Product [PUT] [/product]

+ Request (application/json)

        Full product json (without id field)

+ Response 200 (application/json)

        Full product json

+ Response 400 (application/json)

        Wrong data for product.

## Update Product [POST] [/product]

+ Request (application/json)

        Full product json (with id field)

+ Response 200 (application/json)

        Full product json

+ Response 400 (application/json)

        Wrong data for product.

## Update Product and related devices metadata [POST] [/product/updateDevices]

+ Request (application/json)

        Full product json (with id field)

+ Response 200 (application/json)

        Full product json

+ Response 400 (application/json)

        Wrong data for product.

## Delete Product [DELETE] [/product/{productId}]

+ Request (application/json)

+ Response 200 (application/json)

+ Response 400 (application/json)

        User not allowed to delete product (not admin) or product with passed id not found.

+ Response 500 (application/json)

        Unexpected error.


## Upload API [POST] [/upload]

+ Request (multipart/form-data)

        File content.

+ Response 200 (application/json)

        Full path to uploaded image. For example : '/static/FUp_5716167699683281586_logo.png'.
        Product and Org has logoUrl field you need to set with that url

+ Response 400 (application/json)

        Something went wrong during upload.


# Devices API

## Get All devices for user [GET] [/devices/{orgId}?orderField={fieldName}&order={orderType}]

+ Request (application/json)

        {fieldName} - field to order by, for example 'name';
        {orderType} - order direction ASC|DESC;

+ Response 200 (application/json)

    [
        {
          "id" : 1,
          "productId" : -1,
          "productName" : "My Product",
          "name" : "My New Device",
          "token" : "18aaf2a2a2ae4c9e9ba0cf9c0e1ef339",
          "status" : "OFFLINE",
          "disconnectTime" : 0,
          "updatedAt" : 0,
          "criticalSinceLastView" : 1,
          "warningSinceLastView" : 2,
          "metaFields" : [ {
            "type" : "Number",
            "name" : "Jopa",
            "role" : "STAFF",
            "value" : 123.0
          } ]
        }, {
          "id" : 2,
          "productId" : -1,
          "productName" : "My Product",
          "name" : "My New Device",
          "token" : "d3a1b712802a490f9e95edce53f0091c",
          "status" : "OFFLINE",
          "disconnectTime" : 0,
          "updatedAt" : 0,
          "metaFields" : [ {
            "type" : "Number",
            "name" : "Jopa",
            "role" : "STAFF",
            "value" : 123.0
          } ]
        }, {
          "id" : 0,
          "productId" : -1,
          "boardType" : "ESP8266",
          "token" : "7b0a3a61322e41a5b50589cf52d775d1",
          "status" : "OFFLINE",
          "disconnectTime" : 0,
          "updatedAt" : 0
        }
    ]

## Get device by id [GET] [/devices/{orgId}/{deviceId}]

+ Request (application/json)

+ Response 200 (application/json)

        {
          "id" : 1,
          "productId" : -1,
          "orgName" : "Blynk Inc.",
          "productName" : "My product",
          "productLogoUrl" : "/productlogourl",
          "name" : "My New Device",
          "token" : "18aaf2a2a2ae4c9e9ba0cf9c0e1ef339",
          "status" : "OFFLINE",
          "disconnectTime" : 0,
          "updatedAt" : 0,
          "metaFields" : [ {
            "type" : "Number",
            "name" : "Jopa",
            "role" : "STAFF",
            "value" : 123.0
          } ]
        }

## Create New Device [PUT] [/devices/{orgId}]

+ Request (application/json)

       Device json with 4 fields :

       {
           "name" : "My New Device",
           "boardType" : "ESP8266",
           "connectionType" : "WI_FI",
           "productId" : 1
       }

+ Response 200 (application/json)

        Full device json

## Update Device [POST] [/devices/{orgId}]

+ Request (application/json)

        Full product json (with id field)

+ Response 200 (application/json)

        Full device json

## Delete Device [DELETE] [/devices/{orgId}/{deviceId}]

+ Request (application/json)

+ Response 200 (application/json)

## Get device timeline [GET] [/devices/{orgId}/{deviceId}/timeline?eventType=CRITICAL&from=1&to=1496949455462&limit=10&offset=0&isResolved=true]

+ Request (application/json)

+ Response 200 (application/json)


        {
          "totalCritical" : 0,
          "totalWarning" : 0,
          "totalResolved" : 1,
          "logEvents" :
          [
              {
                "id" : 554,
                "deviceId" : 1,
                "eventType" : "CRITICAL",
                "ts" : 1497290276606,
                "eventHashcode" : 613812780,
                "description" : "This is my description",
                "isResolved" : true,
                "resolvedBy" : "Vasya Pupkin",
                "resolvedAt" : 1497290276606,
                "resolveComment" : "My resolve comment",
                "name" : "Temp is super high"
              }
          ]
        }

+ Response 500 (application/json)

## Resolve Log Event [POST] [/devices/{orgId}/{deviceId}/resolveEvent/{logEventId}]

+ Request (application/json)

        {
            "comment" : "My resolve comment"
        }

+ Response 200 (application/json)

+ Response 500 (application/json)

        Error marking event as resolved.